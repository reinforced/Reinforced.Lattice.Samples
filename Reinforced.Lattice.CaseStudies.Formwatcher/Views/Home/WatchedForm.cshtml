@using Reinforced.Lattice.CaseStudies.Formwatcher.Models
@model Reinforced.Lattice.CaseStudies.Formwatcher.Models.WatchedFormViewModel
@{
    var years = new List<SelectListItem>();
    years.Add(new SelectListItem() { Text = "All", Value = string.Empty, Selected = true });
    var curYear = DateTime.Today.Year - 2;
    years.Add(new SelectListItem() { Text = "Not ended", Value = "-1" });
    for (int i = 0; i < 5; i++)
    {
        years.Add(new SelectListItem() { Text = (curYear + i).ToString(), Value = (curYear + i).ToString() });
    }
}
<br />
<div class="row form-horizontal">

    <div class="col-sm-5 col-sm-offset-1 filterColumn">
        <div class="form-group">
            @Html.LabelFor(c => c.Title, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(c => c.Title, new { @class = "form-control", style = "max-width:100%" })
                <span class="help-block subscript">Filtered on server. Try "aggregate", "virtual" or other values from column</span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Supplier, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(c => c.Supplier, new { @class = "form-control", style = "max-width:100%" })
                <span class="help-block subscript">Linked with client filter on "Supplier" column. Automatically triggers search on keyup. Try "inc"</span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Ratings, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(c => c.Ratings, new { @class = "form-control", style = "max-width:100%" })
                <span class="help-block subscript">Turning to array on server, being split by comas. Try "1,3,4"</span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(c => c.Priorities, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-9">
                @Html.DropDownListFor(c => c.Priorities, EnumHelper.GetSelectList(typeof(Priority)).Where(x => x.Value != ((int)Priority.Critical).ToString()), new { @class = "form-control", style = "max-width:100%;height: 100px;", multiple = "multiple" })
                <span class="help-block subscript">Being automatically turned to array on server. "Critical" entries are hardcoded to be displayed always</span>
            </div>
        </div>
    </div>
    <div class="col-sm-5 filterColumn">
        <div class="form-group">
            @Html.LabelFor(c => c.StartDateFrom, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-9">
                <div class="input-group">
                    <span class="input-group-addon">From</span>
                    @Html.TextBoxFor(c => c.StartDateFrom, new { @class = "form-control", placeholder = "Any" })
                    <span class="input-group-addon">To</span>
                    @Html.TextBoxFor(c => c.StartDateTo, new { @class = "form-control", placeholder = "Any" })
                </div>
                <span class="help-block subscript">Two datepickers. <code>.AutoDatePicker</code> used to handle these fields with datepicker configured for table</span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Ordering, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-9">
                @Html.DropDownListFor(c => c.Ordering, EnumHelper.GetSelectList(typeof(OrderingPreset)), new { @class = "form-control" })
                <span class="help-block subscript">FreeOrdering freature is used to extract custom ordering from form</span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.TaxFrom, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-7">
                <div class="input-group">
                    <span class="input-group-addon">From</span>
                    @Html.TextBoxFor(c => c.TaxFrom, new { @class = "form-control", placeholder = "Any" })
                    <span class="input-group-addon">To</span>
                    @Html.TextBoxFor(c => c.TaxTo, new { @class = "form-control", placeholder = "Any" })
                </div>
            </div>
            <div class="col-sm-2">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(x => x.NoTax) @Html.NameFor(x => x.NoTax)
                    </label>
                </div>
            </div>
            <div class="col-sm-9 col-sm-offset-3">
                <span class="help-block subscript">Boolean values extraction example. Also from/to values are automatically divided by 100 if they are greater than 10</span>
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-3 control-label">Price</label>
            <div class="col-sm-3">
                <div class="checkbox">
                    <label>
                        <input type="checkbox" name="chb_Price" value="@PriceRange.From5_15" /> 5k - 15k
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        <input type="checkbox" name="chb_Price" value="@PriceRange.From15_25" /> 15k - 25k
                    </label>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="checkbox">
                    <label>
                        <input type="checkbox" name="chb_Price" value="@PriceRange.From25_35" /> 25k - 35k
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        <input type="checkbox" name="chb_Price" value="@PriceRange.From35_40" /> 35k - 40k
                    </label>
                </div>

            </div>
            <div class="col-sm-3">
                <div class="checkbox">
                    <label>
                        <input type="checkbox" name="chb_Price" value="@PriceRange.From40_50" /> 40k - 50k
                    </label>
                </div>
            </div>
            <div class="col-sm-9 col-sm-offset-3">
                <span class="help-block subscript">This set of checkboxes is being turned to array of values and passed to server</span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.EndYear, new { @class = "col-sm-3 control-label" })
            <div class="col-sm-9">
                @Html.DropDownListFor(c => c.EndYear, years, new { @class = "form-control" })
                <span class="help-block subscript">Value extracted from select box</span>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-2 col-sm-offset-5 text-center" id="searchPlaceholder">

    </div>
</div>
