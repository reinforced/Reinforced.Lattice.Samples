@{ ViewBag.Title = "Cells templating"; }

@using System.IdentityModel
@using Reinforced.Lattice.CaseStudies.CellsTemplating.Models
@using Reinforced.Lattice.CellTemplating
@using Reinforced.Lattice.Configuration
@using Reinforced.Lattice.Mvc
@using Reinforced.Lattice.Templates
@model Reinforced.Lattice.CaseStudies.CellsTemplating.Models.HomeIndexViewModel
@{
    var conf = Model.Table;
    conf.Column(c => c.Rating).TemplateFunction("formatRating");
    conf.Column(c => c.Id).DataOnly();
    conf.Column(c => c.FirstName).DataOnly();
    conf.Column(c => c.LastName).DataOnly();
    conf.Column(c => c.UserPic).Title("Customer")
        .Razor(@<div class="row">
            <div class="col-sm-3">
                <img src="https://raw.githubusercontent.com/reinforced/Reinforced.Lattice.Samples/master/Reinforced.Lattice.CaseStudies.CellsTemplating/Content/icons/@item[x=>x.UserPic]" />
            </div>
            <div class="col-sm-9">
                @item[x => x.FirstName] @item[x => x.LastName] <br />
                <a href="/Customers/View/@item[x=>x.Id]">Profile</a>
            </div>
        </div>);
    conf.Column(c => c.LastOrderDate).Title("Last order").Format("`moment({@}).fromNow()`");

    conf.Column(c => c.IsActive).Title("Active?").RazorBoolean(
        @<span class="glyphicon glyphicon-ok"></span>,
        @<span class="glyphicon glyphicon-remove"></span>);

    conf.Column(c => c.Email).Template(x =>
    {
        x.IfNotPresent("{@}", "<i>Not provided</i>");
        x.Razor(@<a href="mailto:{#}">{#}</a>);
    });

    conf.Column(c => c.Type).TemplateEnum();
    conf.Column(c => c.Type).FormatEnum();
    conf.Column(c => c.Type).RazorEnum(
        content: @<span color="@(item.Value == "0" ? "red" : "black")">@item.Value</span>, // optionally override content HTML
        deflt: @<span>Not known</span> // optionally override case when value is null or not defined
        );

    conf.Column(c => c.Gender).Template(x =>
    {
        x.IfNotPresent("{@}", "<i>Not provided</i>");
        x.RazorIf("{@}==0", @<b style="color:#407ac3"> Male </b>);
        x.RazorIf("{@}==1", @<b style="color:#f043c3"> Female </b>);
    });

    conf.Column(c => c.Phone).DataOnly();
    conf.Column(c => c.PhoneType).TemplateEnum(content: (a, v) =>
    {
        a.Tag("span").Class("glyphicon");
        if (v.Value == "0") a.Class("glyphicon-phone");
        if (v.Value == "1") a.Class("glyphicon-phone-alt");
        if (v.Value == "2") a.Class("glyphicon-earphone");
        a.After(" {Phone}");
    });

}
<div id="table"></div>

@section scripts {
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"></script>

    <script type="text/javascript">
        function formatRating(v) {
            // here v - is ICell instance
            var s = "<h4 style='color:orange'>";
            for (var i = 0; i < 5; i++) {

                // we access v.DataObject to retrieve current row's
                // Rating field. You also can use v.Data to make this function
                // multipurpose
                if (i < v.DataObject.Rating) s += "<span class='glyphicon glyphicon-star'></span>";
                else s += "<span class='glyphicon glyphicon-star-empty'></span>";
            }
            s += "</h4>";
            return s;
        }
    </script>

    @{ Html.RenderTemplates("lt", "Lattice_Templates_Bootstrap"); }

    @Model.Table.InitializationScript("table", "window.$$table")
}